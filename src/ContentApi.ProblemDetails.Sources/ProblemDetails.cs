using System;
using System.Collections.Generic;
using System.Net;
using Newtonsoft.Json;

namespace EPiServer.ContentApi.Problems.Internal
{
    /// <summary>
    /// A machine-readable format for specifying errors in HTTP API responses based on https://tools.ietf.org/html/rfc7807.
    /// </summary>
    public class ProblemDetails
    {
        /// <summary>
        /// Content type used for Problem Details responses.
        /// </summary>
        internal const string MediaType = "application/problem+json";

        private static readonly Dictionary<HttpStatusCode, ProblemDetails> StandardProblems = new Dictionary<HttpStatusCode, ProblemDetails>
        {
            { HttpStatusCode.BadRequest, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.1", Title = "Bad Request", Status = (int)HttpStatusCode.BadRequest } },
            { HttpStatusCode.Unauthorized, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7235#section-3.1", Title = "Unauthorized", Status = (int)HttpStatusCode.Unauthorized } },
            { HttpStatusCode.Forbidden, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.3", Title = "Forbidden", Status = (int)HttpStatusCode.Forbidden } },
            { HttpStatusCode.NotFound, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.4", Title = "Not Found", Status = (int)HttpStatusCode.NotFound } },
            { HttpStatusCode.NotAcceptable, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.6", Title = "Not Acceptable", Status = (int)HttpStatusCode.NotAcceptable } },
            { HttpStatusCode.Conflict, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.8", Title = "Conflict", Status = (int)HttpStatusCode.Conflict } },
            { HttpStatusCode.UnsupportedMediaType, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.5.13", Title = "Unsupported Media Type", Status = (int)HttpStatusCode.UnsupportedMediaType } },
            { (HttpStatusCode)422, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc4918#section-11.2", Title = "Unprocessable Entity", Status = 422 } },
            { HttpStatusCode.InternalServerError, new ProblemDetails{ Type = "https://tools.ietf.org/html/rfc7231#section-6.6.1", Title = "Internal Server Error", Status = (int)HttpStatusCode.InternalServerError } },
        };

        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
        /// dereferenced, it provide human-readable documentation for the problem type
        /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
        /// "about:blank".
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; } = "about:blank";

        /// <summary>
        /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
        /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
        /// see[RFC7231], Section 3.4).
        /// </summary>
        [JsonProperty("title")]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
        /// </summary>
        [JsonProperty("status")]
        public int? Status { get; set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [JsonProperty("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
        /// </summary>
        [JsonProperty("instance")]
        public string Instance { get; set; }

        /// <summary>
        /// An code specific to a certain problem (Not defined by RFC7807).
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }

        /// <summary>
        /// An list of errors resulting from model validation (Not defined by RFC7807, follows ASP.NET Core usage).
        /// </summary>
        [JsonProperty("errors")]
        public IDictionary<string, string[]> Errors { get; } = new Dictionary<string, string[]>(StringComparer.Ordinal);

        /// <summary>
        /// Gets the <see cref="IDictionary{TKey, TValue}"/> for extension members.
        /// <para>
        /// Problem type definitions MAY extend the problem details object with additional members. Extension members appear in the same namespace as
        /// other members of a problem type.
        /// </para>
        /// </summary>
        /// <remarks>
        /// The round-tripping behavior for <see cref="Extensions"/> is determined by the implementation of the Input \ Output formatters.
        /// In particular, complex types or collection types may not round-trip to the original type when using the built-in JSON or XML formatters.
        /// </remarks>
        [JsonExtensionData]
        public IDictionary<string, object> Extensions { get; internal set; } = new Dictionary<string, object>(StringComparer.Ordinal);

        internal ProblemDetails Clone() =>
            new ProblemDetails
            {
                Detail = Detail,
                Extensions = new Dictionary<string, object>(Extensions),
                Instance = Instance,
                Status = Status,
                Title = Title,
                Type = Type
            };

        internal static ProblemDetails ForStatusCode(HttpStatusCode statusCode, string instance = null, string title = null, string detail = null, string code = null)
        {
            if (StandardProblems.TryGetValue(statusCode, out var problem))
            {
                problem = problem.Clone();
                problem.Instance = instance;
                problem.Detail = detail ?? title;
                problem.Code = code;
                return problem;
            }

            return new ProblemDetails
            {
                Status = (int)statusCode,
                Title = title ?? statusCode.ToString(),
                Instance = instance,
                Detail = detail,
                Code = code,
            };
        }
    }
}
